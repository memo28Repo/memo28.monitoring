import { MonitoringConfigImpl, TriggerLevelImplType } from "@memo28.monitoring/sdk-abstract";
export declare class Monitoring implements MonitoringConfigImpl {
    blacklistUrls: string[];
    captureDeviceDetails: boolean;
    captureNetworkRequests: boolean;
    captureUserDetails: boolean;
    captureUserInteractions: boolean;
    clearCacheOnError: boolean;
    crossOriginErrorTracking: boolean;
    customErrorTypes: TriggerLevelImplType[];
    errorSamplingRate: number;
    errorTrackingEnabled: boolean;
    logLevel: "DEBUG" | "INFO" | "WARN" | "ERROR";
    maxRetries: number;
    performanceSamplingRate: number;
    performanceTrackingEnabled: boolean;
    reportingEndpoint: string;
    reportingInterval: number;
    whitelistUrls: string[];
    getBlacklistUrls(): string[];
    getCaptureDeviceDetails(): boolean;
    getCaptureNetworkRequests(): boolean;
    getCaptureUserDetails(): boolean;
    getCaptureUserInteractions(): boolean;
    getCrossOriginErrorTracking(): boolean;
    getCustomErrorTypes(): TriggerLevelImplType[];
    getErrorSamplingRate(): number;
    getErrorTrackingEnabled(): boolean;
    getLogLevel(): "DEBUG" | "INFO" | "WARN" | "ERROR";
    getMaxRetries(): number;
    getPerformanceSamplingRate(): number;
    getPerformanceTrackingEnabled(): boolean;
    getReportingEndpoint(): string;
    getReportingInterval(): number;
    getWhitelistUrls(): string[];
    setBlacklistUrls(value: string[]): this;
    setCaptureDeviceDetails(value: boolean): this;
    setCaptureNetworkRequests(value: boolean): this;
    setCaptureUserDetails(value: boolean): this;
    setCaptureUserInteractions(value: boolean): this;
    setCrossOriginErrorTracking(value: boolean): this;
    setCustomErrorTypes(value: TriggerLevelImplType[]): this;
    setErrorSamplingRate(value: number): this;
    setErrorTrackingEnabled(value: boolean): this;
    setLogLevel(value: "DEBUG" | "INFO" | "WARN" | "ERROR"): this;
    setMaxRetries(value: number): this;
    setPerformanceSamplingRate(value: number): this;
    setPerformanceTrackingEnabled(value: boolean): this;
    setReportingEndpoint(value: string): this;
    setReportingInterval(value: number): this;
    setWhitelistUrls(value: string[]): this;
    getClearCacheOnError(): boolean;
    setClearCacheOnError(value: boolean): this;
}
